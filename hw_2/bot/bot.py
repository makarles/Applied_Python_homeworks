import asyncio
from aiogram import Bot, Dispatcher, Router
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from loguru import logger

from config import BOT_TOKEN, LoggingMiddleware
from profile import profile_router
from db import (
    log_water, log_consumed_calories, log_burned_calories,
    get_progress, get_user_weight, increase_water_target
)
from utils import get_food_nutrition, get_workout_calories_burned

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
dp.include_router(profile_router)
dp.message.outer_middleware(LoggingMiddleware())

@dp.message(CommandStart())
async def start_command(message: Message):
    """–ù–∞—á–∞–ª–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."""
    await message.answer(
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥ –∫–∞–ª–æ—Ä–∏–π.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –∫–æ–º–∞–Ω–¥.'
    )

@dp.message(Command('help'))
async def help_command(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞."""
    await message.answer(
        '–Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–∏ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã –∏ —Ä–∞—Å—Ö–æ–¥–∞ –∫–∞–ª–æ—Ä–∏–π.\n'
        '–°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n'
        'üîê /set_profile ‚Äî –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—á–∏—â–∞–µ—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –¥–∞–Ω–Ω—ã–µ);\n'
        'üíß /log_water <–æ–±—ä—ë–º –≤–æ–¥—ã –≤ –º–ª> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤–æ–¥—ã;\n'
        'üå≠ /log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º> <—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –≥> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏—ë–º –ø–∏—â–∏;\n'
        'üèÉ /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º> <–≤—Ä–µ–º—è –≤ –º–∏–Ω> ‚Äî –∑–∞–ø–∏—Å–∞—Ç—å —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É;\n'
        'üìä /check_progress ‚Äî –≤—ã–≤–µ—Å—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π;\n'
        '‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.'
    )

@dp.message(Command('cancel'))
async def cancel_command(message: Message, state: FSMContext):
    """–°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è)."""
    current_state = await state.get_state()
    if current_state is None:
        await message.answer('‚ùå –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å')
    else:
        await state.clear()
        await message.answer('‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')

@dp.message(Command('log_water'))
async def log_water_command(message: Message, command: CommandObject):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã."""
    water_volume = command.args
    if water_volume is None:
        await message.answer('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—ä—ë–º –ø–æ—Ç—Ä–µ–±–ª—ë–Ω–Ω–æ–π –≤–æ–¥—ã (–≤ –º–ª)')
        return
    try:
        water_volume = int(water_volume)
    except ValueError:
        await message.answer('‚ùå –ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ –≤–æ–¥—ã')
        return
    if water_volume < 0 or water_volume > 3000:
        await message.answer('‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π –æ–±—ä—ë–º –≤–æ–¥—ã –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (0, 3000) –º–ª')
        return
    try:
        await log_water(message.from_user.id, water_volume)
    except KeyError:
        await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.')
        return
    data = await get_progress(message.from_user.id)
    await message.answer(
        'üíß –í—ã–ø–∏—Ç–∞—è –≤–æ–¥–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! '
        f'üí¶ –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å: {data["logged_water"]}/{data["water_target"]} –º–ª.'
    )

class ConfirmationState(StatesGroup):
    awaiting_confirmation = State()

@dp.message(Command('log_food'))
async def log_food_command(message: Message, command: CommandObject, state: FSMContext):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏."""
    if command.args is None:
        await message.answer('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∏—â–∏')
        return
    try:
        args = command.args.split()
        food_name = " ".join(args[:-1])
        serving_size = int(args[-1])
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                             '/log_food <–Ω–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º> <—Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤ –≥>')
        return
    if serving_size < 0 or serving_size > 1000:
        await message.answer('‚ùå –í–≤–µ–¥—ë–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (0, 1000) –≥')
        return
    status, food_data = await get_food_nutrition(food_name)
    if status != 0:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç–∏ –ø–∏—â–∏')
        return
    calories = food_data['calories'] / 100 * serving_size
    await state.update_data(mode='food', calories=calories)
    await state.set_state(ConfirmationState.awaiting_confirmation)
    await message.answer(
        'üå≠ –ù–∞–π–¥–µ–Ω–Ω–∞—è –µ–¥–∞:\n'
        f'–ù–∞–∑–≤–∞–Ω–∏–µ: {food_data["name"]}\n'
        f'–†–∞–∑–º–µ—Ä –ø–æ—Ä—Ü–∏–∏: {serving_size} –≥\n'
        f'–û–±—â–∞—è –∫–∞–ª–æ—Ä–∏–π–Ω–æ—Å—Ç—å: {calories} –∫–∫–∞–ª\n'
        '–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞‚úÖ/–Ω–µ—Ç‚ùå)'
    )

@dp.message(Command('log_workout'))
async def log_workout_command(message: Message, command: CommandObject, state: FSMContext):
    """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏."""
    if command.args is None:
        await message.answer('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
        return
    try:
        args = command.args.split()
        workout_name = " ".join(args[:-1])
        duration = int(args[-1])
    except ValueError:
        await message.answer('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n'
                             '/log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º> <–≤—Ä–µ–º—è –≤ –º–∏–Ω>')
        return
    if duration < 0 or duration > 1440:
        await message.answer('‚ùå –í–≤–µ–¥—ë–Ω–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –∏–∑ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ (0, 1440) –º–∏–Ω')
        return
    try:
        weight = await get_user_weight(message.from_user.id)
    except KeyError:
        await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.')
        return
    status, workout_data = await get_workout_calories_burned(workout_name, weight, duration)
    if status != 0:
        await message.answer('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏')
        return
    await state.update_data(mode='workout', calories=workout_data['calories'], duration=duration)
    await state.set_state(ConfirmationState.awaiting_confirmation)
    await message.answer(
        'üèÉ –ù–∞–π–¥–µ–Ω–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n'
        f'–ù–∞–∑–≤–∞–Ω–∏–µ: {workout_data["name"]}\n'
        f'–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n'
        f'–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω—ã–µ –∫–∞–ª–æ—Ä–∏–∏: {workout_data["calories"]} –∫–∫–∞–ª\n'
        '–í—Å—ë –≤–µ—Ä–Ω–æ? (–¥–∞‚úÖ/–Ω–µ—Ç‚ùå)'
    )

@dp.message(ConfirmationState.awaiting_confirmation)
async def confirm_message(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –µ–¥—ã –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫."""
    try:
        if message.text.lower() in ('–¥–∞', 'yes'):
            data = await state.get_data()
            calories = data['calories']
            if data['mode'] == 'food':
                await log_consumed_calories(message.from_user.id, calories)
                p_data = await get_progress(message.from_user.id)
                await state.clear()
                await message.answer(
                    'üå≠ –ü—Ä–∏—ë–º –ø–∏—â–∏ –∑–∞–ø–∏—Å–∞–Ω! '
                    f'üòã –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å: {p_data["logged_calories"]}/{p_data["calorie_target"]} –∫–∫–∞–ª.'
                )
            else:
                await log_burned_calories(message.from_user.id, calories)
                extra_water = 200 * (data['duration'] // 30)
                await increase_water_target(message.from_user.id, extra_water)
                p_data = await get_progress(message.from_user.id)
                await state.clear()
                await message.answer(
                    f'üèÉ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞! üíß –î–æ–±–∞–≤–ª–µ–Ω–æ {extra_water} –º–ª –≤–æ–¥—ã –∫ –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏.\n'
                    f'üî• –°–æ–∂–∂–µ–Ω–æ –∑–∞ –¥–µ–Ω—å: {p_data["burned_calories"]} –∫–∫–∞–ª\n'
                    f'üí¶ –í–æ–¥–∞ –∑–∞ –¥–µ–Ω—å: {p_data["logged_water"]}/{p_data["water_target"]} –º–ª'
                )
        elif message.text.lower() in ('–Ω–µ—Ç', 'no'):
            await state.clear()
            await message.answer('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞')
        else:
            await message.answer('‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É')
    except KeyError:
        await state.clear()
        await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.')

@dp.message(Command('check_progress'))
async def check_progress_command(message: Message):
    """–í—ã–≤–æ–¥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–Ω–µ–≤–Ω—ã—Ö —Ü–µ–ª–µ–π."""
    try:
        data = await get_progress(message.from_user.id)
    except KeyError:
        await message.answer('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_profile.')
        return
    await message.answer(
        'üìä –î–Ω–µ–≤–Ω–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å:\n'
        f'üí¶ –í–æ–¥–∞: –≤—ã–ø–∏—Ç–æ {data["logged_water"]}/{data["water_target"]} –º–ª.\n'
        '–ö–∞–ª–æ—Ä–∏–∏:\n'
        f'üòã –ü–æ–≥–ª–æ—â–µ–Ω–æ {data["logged_calories"]}/{data["calorie_target"]} –∫–∫–∞–ª;\n'
        f'üî• –°–æ–∂–∂–µ–Ω–æ {data["burned_calories"]} –∫–∫–∞–ª.'
    )

final_router = Router()
dp.include_router(final_router)

@final_router.message()
async def unrecognized_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ –ø–æ–π–º–∞–Ω–Ω—ã—Ö —Ä–∞–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–π."""
    logger.error(f'–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: "{message.text}"')
    await message.answer(f'‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞: "{message.text}"')

async def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info('Polling –∑–∞–ø—É—â–µ–Ω')
        await dp.start_polling(bot)
    finally:
        logger.info('Polling –ø—Ä–µ–∫—Ä–∞—â—ë–Ω')
        await bot.session.close()

if __name__ == '__main__':
    asyncio.run(main())
