import streamlit as st
import sys
import os
import pandas as pd
import plotly.express as px
from temperature_analysis import analyze_temperature, detect_anomalies
import asyncio

sys.path.append(os.path.dirname(os.path.abspath(__file__)))
def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.set_page_config(
        page_title='–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥',
        page_icon='üå°Ô∏è',
        layout='wide'
    )

    st.title('–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥')

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    st.header('–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö')
    file_upload = st.file_uploader('–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏', type=['csv'])

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞
    if file_upload is not None:
        try:
            # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            data = pd.read_csv(file_upload)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
            required_columns = {'city', 'timestamp', 'temperature', 'season'}
            if not required_columns.issubset(data.columns):
                st.error(f'–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏: {", ".join(required_columns)}')
                return
            else:
                st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            return
    else:
        st.info("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        return

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    data['timestamp'] = pd.to_datetime(data['timestamp'])  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º timestamp –≤ datetime

    # –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞
    cities = data['city'].unique()
    selected_city = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", cities)
    city_data = data[data['city'] == selected_city]

    # –í–≤–æ–¥ API –∫–ª—é—á–∞
    api_key = st.text_input('–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á OpenWeatherMap –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã')

    # –†–∞—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    st.subheader(f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–æ—Ä–æ–¥—É: {selected_city}')
    season_stats = city_data.groupby('season')['temperature'].agg(['mean', 'std'])
    st.dataframe(season_stats)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª–∏–π
    city_data = detect_anomalies(city_data, season_stats)

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä—è–¥–æ–≤ —Å —Ç–æ—á–∫–∞–º–∏
    st.subheader(f'–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –≥–æ—Ä–æ–¥–∞: {selected_city}')

    # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –∏ –∞–Ω–æ–º–∞–ª—å–Ω—ã–µ
    not_anomalies = city_data[city_data['is_anomaly'] == False]
    anomalies = city_data[city_data['is_anomaly'] == True]

    # –°–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ —Å Plotly
    fig = px.scatter(
        city_data,
        x='timestamp',
        y='temperature',
        color='is_anomaly',
        color_discrete_map={False: 'blue', True: 'red'},
        title=f"–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä—è–¥—ã –¥–ª—è {selected_city}",
        labels={'is_anomaly': '–ê–Ω–æ–º–∞–ª–∏—è'}
    )

    # –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ –∫–∞–∫ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
    fig.add_scatter(
        x=city_data['timestamp'],
        y=city_data['rolling_mean'],
        mode='lines',
        line=dict(color='lime', width=5),
        name='–°–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ'
    )

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π –∏ –ª–µ–≥–µ–Ω–¥—ã
    fig.update_layout(
        xaxis_title="–î–∞—Ç–∞",
        yaxis_title="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ (¬∞C)",
        legend_title="–¢–∏–ø –¥–∞–Ω–Ω—ã—Ö",
        template="plotly_white",
        height=500
    )

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    st.plotly_chart(fig)

    # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    if api_key:
        st.subheader(f'–¢–µ–∫—É—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –≥–æ—Ä–æ–¥–µ: {selected_city}')
        try:
            asyncio.run(analyze_temperature(city_data, selected_city, api_key, season_stats))
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã: {e}")
    else:
        st.warning("–í–≤–µ–¥–∏—Ç–µ API-–∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã.")


if __name__ == "__main__":
    main()
